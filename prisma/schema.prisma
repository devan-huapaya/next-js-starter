// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// use prisma:dev script to use .env.development.local file
// example: yarn prisma:dev migrate dev, yarn prisma:dev studio

// Write your data models here
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String                  @id @default(cuid())
  name          String?
  email         String?                 @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  studies       CoordinatorsOnStudies[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum StudyStatus {
  new
  approved
  archived
}

model Study {
  id             String                  @id @default(cuid())
  description    String
  image          Document?               @relation(fields: [imageId], references: [id])
  imageId        String?                 @unique
  status         StudyStatus             @default(new)
  submissionDate DateTime                @default(now())
  endDate        DateTime
  title          String
  users          CoordinatorsOnStudies[]
}

model CoordinatorsOnStudies {
  study       Study    @relation(fields: [studyId], references: [id])
  studyId     String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  inserted_at DateTime @default(now())

  @@id([studyId, userId])
}

model Document {
  id           String  @id @default(cuid())
  uploadedById String?
  name         String
  url          String
  fileType     String
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  study        Study?
  studyId      String?
}

model NotificationEvent {
  id                String   @id @default(cuid())
  inserted_at       DateTime @default(now())
  notification_type String
  body              Json
}

enum MethodType {
  get
  post
  put
  patch
  delete
}

model EventLog {
  id         String     @id @default(cuid())
  model      String
  recordIds  String[]   @map("record_id")
  methodType MethodType @map("method_type")
  insertedAt DateTime   @default(now()) @map("inserted_at")
  body       Json?
  userId     String?    @map("user_id")
}
